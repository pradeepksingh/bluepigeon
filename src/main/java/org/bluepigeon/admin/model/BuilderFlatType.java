package org.bluepigeon.admin.model;
// Generated 27 Mar, 2017 5:55:47 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * BuilderFlatType generated by hbm2java
 */
@Entity
@Table(name = "builder_flat_type", catalog = "blue_pigeon")
public class BuilderFlatType implements java.io.Serializable {

	private Integer id;
	private AdminUser adminUser;
	private BuilderProjectPropertyConfiguration builderProjectPropertyConfiguration;
	private BuilderProject builderProject;
	private String name;
	private Double superBuiltupArea;
	private Double builtupArea;
	private Double carpetArea;
	private Byte bedroom;
	private Byte bathroom;
	private Byte balcony;
	private Byte drybalcony;
	private Byte status;
	private Set<BuilderFlat> builderFlats = new HashSet<BuilderFlat>(0);

	public BuilderFlatType() {
	}

	public BuilderFlatType(AdminUser adminUser, Double superBuiltupArea, Double builtupArea, Double carpetArea,
			BuilderProjectPropertyConfiguration builderProjectPropertyConfiguration, BuilderProject builderProject,
			String name, Byte bedroom, Byte bathroom, Byte balcony, Byte drybalcony, Byte status,
			Set<BuilderFlat> builderFlats) {
		this.adminUser = adminUser;
		this.builderProjectPropertyConfiguration = builderProjectPropertyConfiguration;
		this.builderProject = builderProject;
		this.name = name;
		this.superBuiltupArea = superBuiltupArea;
		this.builtupArea = builtupArea;
		this.carpetArea = carpetArea;
		this.bedroom = bedroom;
		this.bathroom = bathroom;
		this.balcony = balcony;
		this.drybalcony = drybalcony;
		this.status = status;
		this.builderFlats = builderFlats;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "emp_id")
	public AdminUser getAdminUser() {
		return this.adminUser;
	}

	public void setAdminUser(AdminUser adminUser) {
		this.adminUser = adminUser;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "config_id")
	public BuilderProjectPropertyConfiguration getBuilderProjectPropertyConfiguration() {
		return this.builderProjectPropertyConfiguration;
	}

	public void setBuilderProjectPropertyConfiguration(
			BuilderProjectPropertyConfiguration builderProjectPropertyConfiguration) {
		this.builderProjectPropertyConfiguration = builderProjectPropertyConfiguration;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "project_id")
	public BuilderProject getBuilderProject() {
		return this.builderProject;
	}

	public void setBuilderProject(BuilderProject builderProject) {
		this.builderProject = builderProject;
	}

	@Column(name = "name", length = 128)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	@Column(name = "super_builtup_area")
	public Double getSuperBuiltupArea() {
		return superBuiltupArea;
	}

	public void setSuperBuiltupArea(Double superBuiltupArea) {
		this.superBuiltupArea = superBuiltupArea;
	}

	@Column(name = "builtup_area")
	public Double getBuiltupArea() {
		return builtupArea;
	}

	public void setBuiltupArea(Double builtupArea) {
		this.builtupArea = builtupArea;
	}

	@Column(name = "carpet_area")
	public Double getCarpetArea() {
		return carpetArea;
	}

	public void setCarpetArea(Double carpetArea) {
		this.carpetArea = carpetArea;
	}

	@Column(name = "bedroom")
	public Byte getBedroom() {
		return bedroom;
	}

	public void setBedroom(Byte bedroom) {
		this.bedroom = bedroom;
	}

	@Column(name = "bathroom")
	public Byte getBathroom() {
		return bathroom;
	}

	public void setBathroom(Byte bathroom) {
		this.bathroom = bathroom;
	}

	@Column(name = "balcony")
	public Byte getBalcony() {
		return balcony;
	}

	public void setBalcony(Byte balcony) {
		this.balcony = balcony;
	}

	@Column(name = "drybalcony")
	public Byte getDrybalcony() {
		return drybalcony;
	}

	public void setDrybalcony(Byte drybalcony) {
		this.drybalcony = drybalcony;
	}

	@Column(name = "status")
	public Byte getStatus() {
		return this.status;
	}

	public void setStatus(Byte status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "builderFlatType")
	public Set<BuilderFlat> getBuilderFlats() {
		return this.builderFlats;
	}

	public void setBuilderFlats(Set<BuilderFlat> builderFlats) {
		this.builderFlats = builderFlats;
	}

}
